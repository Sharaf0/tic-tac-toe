{"version":3,"sources":["contexts/PlayersContext.ts","Square.tsx","Score.tsx","lib/Utils.ts","Board.tsx","classes/Player.ts","classes/PlayerScore.ts","hooks/players.hook.ts","App.tsx","index.tsx","styles.module.scss"],"names":["DEFAULT_PLAYERS_CONTEXT_VALUE","currentPlayerId","playingPlayersCount","Error","init","setNextPlayerId","getPlayerName","playerNumber","setPlayerName","name","getPlayerSign","id","addScoreToWinner","getPlayersScores","playersContext","createContext","Square","props","useContext","sign","undefined","playerId","className","classes","square","onClick","Score","scores","sort","a","b","map","playerScore","index","key","score","getPositionFromNumbersToString","r","c","getCountFromDirection","moves","player","row","col","verticalMovement","horizontalMovement","boardSize","count","get","Board","useEffect","names","useState","lastMove","setLastMove","Map","setMoves","winnerPlayer","useMemo","winningSize","Directions","pos","splits","split","getPositionFromStringToNumbers","Still","Left","Right","Up","Down","some","d1","d2","getWinner","isBoardFilled","size","isGameOver","onSquareClick","useCallback","rowNumber","colNumber","has","newMoves","set","renderRow","boardRow","Array","fill","_","currentPlayerName","game","board","restart","i","Player","inPlay","this","PlayerScore","usePlayers","playersRepo","setPlayersRepo","setCurrentPlayerId","p","cloneOfPlayersRepo","firstId","indexInRepo","findIndex","push","splice","length","filter","playingPlayersIds","indexOf","newId","find","newName","App","numOfPlayers","setNumOfPlayers","inPlayMode","setInPlayMode","setNames","person","prompt","body","onSubmit","event","inputNames","preventDefault","type","value","min","max","onChange","parseInt","target","Provider","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"uLAeMA,EAAgD,CACpDC,iBAAkB,EAClBC,oBAAqB,WACnB,MAAMC,MAAM,kCAEdC,KAAM,WACJ,MAAMD,MAAM,mBAEdE,gBAAiB,WACf,MAAMF,MAAM,8BAEdG,cAAe,SAACC,GACd,MAAMJ,MAAM,4BAEdK,cAAe,SAACD,EAAsBE,GACpC,MAAMN,MAAM,4BAEdO,cAAe,SAACC,GACd,MAAMR,MAAM,4BAEdS,iBAAkB,SAACD,GACjB,MAAMR,MAAM,+BAEdU,iBAAkB,WAChB,MAAMV,MAAM,gCAIHW,EAAiBC,wBAC5Bf,GCxBagB,EAXA,SAACC,GAAkB,IACxBP,EAAkBQ,qBAAWJ,GAA7BJ,cACFS,OACeC,IAAnBH,EAAMI,SAAyBX,EAAcO,EAAMI,UAAY,GACjE,OACE,4BAAQC,UAAWC,IAAQC,OAAQC,QAASR,EAAMQ,SAC/CN,ICSQO,EAhBD,SAACT,GACb,OACE,6BACGA,EAAMU,OACJC,MAAK,SAACC,EAAGC,GAAJ,OAAWD,EAAEpB,KAAOqB,EAAErB,MAAQ,EAAI,KACvCsB,KAAI,SAACC,EAAaC,GAAd,OACH,yBAAKC,IAAKD,EAAQ,GAChB,8BACGD,EAAYvB,KADf,KACuBuB,EAAYG,aCTlCC,EAAiC,SAC5CC,EACAC,GAEA,OAAOD,EAAI,IAAMC,GAGNC,EAAwB,SACnCC,EACAC,EACAC,EACAC,EACAC,EACAC,EACAC,GAEA,IAAIC,EAAQ,EACZ,GACEL,GAAOE,EACPD,GAAOE,EACPE,UAEAL,GAAO,GACPC,GAAO,GACPD,EAAMI,GACNH,EAAMG,GACNN,EAAMQ,IAAIZ,EAA+BM,EAAKC,MAAUF,GAG1D,OAAOM,GCoGME,EAtHD,SAAChC,GAAkB,IAAD,EAQ1BC,qBAAWJ,GANbV,EAF4B,EAE5BA,KACAQ,EAH4B,EAG5BA,iBACAN,EAJ4B,EAI5BA,cACAD,EAL4B,EAK5BA,gBACAQ,EAN4B,EAM5BA,iBACAZ,EAP4B,EAO5BA,gBAIFiD,qBAAU,WACR9C,EAAKa,EAAMkC,SAEV,IAd2B,MAgBEC,mBAAwB,MAhB1B,mBAgBvBC,EAhBuB,KAgBbC,EAhBa,OAkBJF,mBACxB,IAAIG,KAnBwB,mBAkBvBf,EAlBuB,KAkBhBgB,EAlBgB,KAsBxBC,EAAeC,mBAAuB,WAC1C,OAAiB,OAAbL,EAA0B,KDFT,SACvBb,EACAa,EACAP,EACAa,GAEA,GAAiB,OAAbN,EAAmB,OAAO,KADZ,IAUbO,EAVa,EA5C0B,SAC5CC,GAEA,IAAMC,EAASD,EAAIE,MAAM,KACzB,MAAO,EAAED,EAAO,IAAKA,EAAO,IA2CTE,CAA+BX,GAHhC,mBAGXX,EAHW,KAGNC,EAHM,KAIZF,EAASD,EAAMQ,IAAIK,GAEzB,QAAejC,IAAXqB,EACF,MAAMtC,MAAM,iCA8Bd,OArCkB,SAUbyD,OAVa,gBAUbA,IAVa,iBAUbA,IAVa,YAUbA,IAVa,eAUbA,IAVa,kBAUbA,MAVa,KAiBC,CAEjB,CACE,CAACA,EAAWK,MAAOL,EAAWM,MAC9B,CAACN,EAAWK,MAAOL,EAAWO,QAEhC,CACE,CAACP,EAAWQ,GAAIR,EAAWK,OAC3B,CAACL,EAAWS,KAAMT,EAAWK,QAE/B,CACE,CAACL,EAAWQ,GAAIR,EAAWO,OAC3B,CAACP,EAAWS,KAAMT,EAAWM,OAE/B,CACE,CAACN,EAAWQ,GAAIR,EAAWM,MAC3B,CAACN,EAAWS,KAAMT,EAAWO,SAIfG,MAAK,YAAe,IAAD,mBAAZC,EAAY,KAARC,EAAQ,KAOnC,OALEjC,EAAsBC,EAAOC,EAAQC,EAAKC,EAAK4B,EAAG,GAAIA,EAAG,GAAIzB,GAC7D,GAEAP,EAAsBC,EAAOC,EAAQC,EAAKC,EAAK6B,EAAG,GAAIA,EAAG,GAAI1B,GAC7D,GACe,IAAMa,KAErBlB,EACA,KCjDagC,CAAUjC,EAAOa,EAfhB,GACE,KAgBjB,CAACA,EAAUb,IAEdU,qBAAU,WACa,OAAjBO,GACF7C,EAAiB6C,KAGlB,CAACA,IAEJ,IAAMiB,EAAgBhB,mBAAiB,WACrC,OAAsBZ,MAAfN,EAAMmC,OAGZ,CAACnC,EAAOa,IAELuB,EAAalB,mBAAiB,WAClC,OAAwB,OAAjBD,GAAyBiB,IAC/B,CAACA,EAAejB,IAEboB,EAAgBC,uBACpB,SAACC,EAAmBC,GAElB,IAAMnB,EAAczB,EAA+B2C,EAAWC,GAC9D,IAAuB,IAAnBxC,EAAMyC,IAAIpB,GAAd,CAEAP,EAAYO,GACZ,IAAMqB,EAAW1C,EAAM2C,IAAItB,EAAK5D,GAChCuD,EAAS0B,GACT7E,OAEF,CAACJ,EAAiBuC,EAAOnC,IASrB+E,EAAYN,uBAChB,SAACC,GACC,OACE,yBAAK7C,IAAK6C,EAAWzD,UAAWC,IAAQ8D,UACrCC,MA5DS,IA6DPC,KAAK,GACLxD,KAAI,SAACyD,EAAQR,GAAT,OACH,kBAAC,EAAD,CACE9C,IAAK8C,EACL3D,SAAUmB,EAAMQ,IACdZ,EAA+B2C,EAAWC,IAE5CvD,QAAS,kBAAMoD,EAAcE,EAAWC,YAMpD,CAACxC,EAAOqC,IAGJY,GACiB,IAArBxF,EAAyB,GAAKK,EAAcL,GAE9C,OACE,yBAAKqB,UAAWC,IAAQmE,MACtB,6BACE,8BACId,EAEEF,EACA,QACAjB,EACAnD,EAAcmD,GAAgB,QAC9B,GANH,0BACsBgC,KAQ3B,yBAAKnE,UAAWC,IAAQoE,OACrBf,EACC,4BAAQnD,QA7CI,WAClBR,EAAM2E,UACNtC,EAAY,MACZE,EAAS,IAAID,OA0CP,WAEA+B,MAjGU,IAkGPC,KAAK,GACLxD,KAAI,SAACyD,EAAQK,GAAT,OAAuBT,EAAUS,OAG5C,6BACE,kBAAC,EAAD,CAAOlE,OAAQd,S,cClIFiF,EAMnB,WAAYrF,GAAe,yBAL3BE,QAK0B,OAJ1BF,UAI0B,OAH1B0B,WAG0B,OAF1B4D,YAE0B,EACxBC,KAAKrF,GAAKmF,EAAO/C,QACjBiD,KAAKvF,KAAOA,EACZuF,KAAK7D,MAAQ,EACb6D,KAAKD,QAAS,GAVGD,EAKZ/C,MAAgB,G,ICLJkD,EAGnB,WAAYxF,EAAc0B,GAAgB,yBAF1C1B,UAEyC,OADzC0B,WACyC,EACvC6D,KAAKvF,KAAOA,EACZuF,KAAK7D,MAAQA,GCCJ+D,EAAa,WAAuB,IAAD,EACR9C,mBACpC,IAAIkC,OAFwC,mBACvCa,EADuC,KAC1BC,EAD0B,OASAhD,oBAAU,GATV,mBASvCnD,EATuC,KAStBoG,EATsB,KAWxCzF,EAAmBkE,uBACvB,SAACnE,GACCyF,EACED,EAAYpE,KAAI,SAACuE,GAAD,OAAQA,EAAE3F,KAAOA,EAAT,2BAAmB2F,GAAnB,IAAsBnE,MAAOmE,EAAEnE,MAAQ,IAAMmE,QAGzE,CAACH,IAmEH,MAAO,CACL/F,KA5CW,SAAC+C,GAMZ,IALA,IAAMoD,EAAqBJ,EAAYpE,KAAI,SAACuE,GAAD,mBAAC,eACvCA,GADsC,IAEzCP,QAAQ,OAENS,GAAmB,EALS,WAMvBvE,GACP,IAAMxB,EAAO0C,EAAMlB,GACbwE,EAAcF,EAAmBG,WAAU,SAACJ,GAAD,OAAOA,EAAE7F,OAASA,KAEnE,IAAqB,IAAjBgG,EAAoB,CACtB,IAAMhE,EAAS,IAAIqD,EAAOrF,GAC1BgC,EAAOsD,QAAS,EAChBQ,EAAmBI,KAAKlE,IACP,IAAb+D,IAAgBA,EAAU/D,EAAO9B,QAChC,CACL,IAAM8B,EAAS,IAAIqD,EAAOS,EAAmBE,GAAahG,MAC1DgC,EAAO9B,GAAK4F,EAAmBE,GAAa9F,GAC5C8B,EAAON,MAAQoE,EAAmBE,GAAatE,MAC/CM,EAAOsD,QAAS,EAEhBQ,EAAmBK,OAAOH,EAAa,GACvCF,EAAmBI,KAAKlE,IAEP,IAAb+D,IAAgBA,EAAUD,EAAmBE,GAAa9F,MAlBzDsB,EAAQ,EAAGA,EAAQkB,EAAM0D,OAAQ5E,IAAU,EAA3CA,GAqBToE,EAAmBG,GACnBJ,EAAeG,IAiBfrG,oBAjF0B,WAC1B,OAAOiG,EAAYW,QAAO,SAACrE,GAAD,OAAYA,EAAOsD,UAAQc,QAiFrDxG,gBAnEsByE,uBAAY,WAClC,IAAMiC,EAAoBZ,EACvBW,QAAO,SAACR,GAAD,OAAOA,EAAEP,UAChBhE,KAAI,SAACuE,GAAD,OAAOA,EAAE3F,MACVsB,EAAQ8E,EAAkBC,QAAQ/G,GAClCgH,EAAQF,GAAmB9E,EAAQ,GAAK8E,EAAkBF,QAChER,EAAmBY,KAClB,CAAChH,EAAiBkG,EAAaE,IA6DhCzF,mBACAN,cA5DoB,SAACK,GACrB,IAAM8B,EAAS0D,EAAYe,MAAK,SAACZ,GAAD,OAAOA,EAAE3F,KAAOA,KAChD,IAAK8B,EAAQ,MAAMtC,MAAM,kBAAD,OAAmBQ,EAAnB,oBACxB,OAAO8B,EAAOhC,MA0DdD,cAvDoB,SAACG,EAAYwG,GACjCf,EACED,EAAYpE,KAAI,SAACuE,GAAD,OAAQA,EAAE3F,KAAOA,EAAT,2BAAmB2F,GAAnB,IAAsB7F,KAAM0G,IAAYb,OAsDlE5F,cAnBoB,SAACC,GAGrB,MAFiB,QACMwF,EAAYW,QAAO,SAACR,GAAD,OAAOA,EAAEP,UACpBW,WAAU,SAACJ,GAAD,OAAOA,EAAE3F,KAAOA,OAiBzDV,kBACAY,iBAfuB,WACvB,OAAOsF,EAAYpE,KACjB,SAACU,GAAD,OAAY,IAAIwD,EAAYxD,EAAOhC,KAAMgC,EAAON,aCrBvCiF,MA5Df,WAAgB,IAAD,EAC2BhE,mBAAiB,GAD5C,mBACNiE,EADM,KACQC,EADR,OAEuBlE,oBAAkB,GAFzC,mBAENmE,EAFM,KAEMC,EAFN,OAGapE,mBAAwB,IAAIkC,OAHzC,mBAGNnC,EAHM,KAGCsE,EAHD,KAePnH,EAAgB,SAAhBA,EAAiB2B,GACrB,IAAMyF,EAASC,OAAO,sBAAD,OACG1F,EAAQ,EADX,2BAETA,EAAQ,IAEpB,OAAe,OAAXyF,GAA8B,KAAXA,EACdpH,EAAc2B,GAEdyF,GAcLE,EAAOL,EACX,kBAAC,EAAD,CAAOpE,MAAOA,EAAOyC,QAjCP,WACd4B,GAAc,MAkCd,0BAAMK,SAbS,SAACC,GAEhB,IADA,IAAMC,EAAa,IAAIzC,MAAc+B,GAC5BpF,EAAQ,EAAGA,EAAQ8F,EAAWlB,OAAQ5E,IAC7C8F,EAAW9F,GAAS3B,EAAc2B,GAEpCuF,GAAc,GACdC,EAASM,GACTD,EAAME,mBAOJ,4DACA,2BACEC,KAAK,SACLC,MAAOb,EACPc,IAAI,IACJC,IAAI,IACJC,SAtCW,SAACP,GAChB,IAAMI,EAAQI,SAASR,EAAMS,OAAOL,OAC/BA,GACLZ,EAAgBY,MAqCd,2BAAOD,KAAK,SAASC,MAAM,YAI/B,OACE,kBAACpH,EAAe0H,SAAhB,CAAyBN,MAAOhC,KAC7B0B,ICxDPa,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,U,kBCP1BC,EAAOC,QAAU,CAAC,KAAO,qBAAqB,MAAQ,sBAAsB,SAAW,yBAAyB,OAAS,yB","file":"static/js/main.e52d283b.chunk.js","sourcesContent":["import { createContext } from \"react\";\nimport PlayerScore from \"../classes/PlayerScore\";\n\nexport interface PlayersContext {\n  playingPlayersCount(): number;\n  currentPlayerId: number;\n  setNextPlayerId(): void;\n  getPlayersScores(): PlayerScore[];\n  getPlayerName(playerNumber: number): string;\n  setPlayerName(playerNumber: number, name: string): void;\n  init(names: string[]): void;\n  getPlayerSign(id: number): string;\n  addScoreToWinner(id: number): void;\n}\n\nconst DEFAULT_PLAYERS_CONTEXT_VALUE: PlayersContext = {\n  currentPlayerId: -1,\n  playingPlayersCount: (): number => {\n    throw Error(\"implement playingPlayersCount\");\n  },\n  init: () => {\n    throw Error(\"implement init\");\n  },\n  setNextPlayerId: () => {\n    throw Error(\"implement setNextPlayerId\");\n  },\n  getPlayerName: (playerNumber: number) => {\n    throw Error(\"implement getPlayerName\");\n  },\n  setPlayerName: (playerNumber: number, name: string) => {\n    throw Error(\"implement setPlayerName\");\n  },\n  getPlayerSign: (id: number): string => {\n    throw Error(\"implement getPlayerSign\");\n  },\n  addScoreToWinner: (id: number): void => {\n    throw Error(\"implement addScoreToWinner\");\n  },\n  getPlayersScores: (): PlayerScore[] => {\n    throw Error(\"implement getPlayersScores\");\n  },\n};\n\nexport const playersContext = createContext<PlayersContext>(\n  DEFAULT_PLAYERS_CONTEXT_VALUE\n);\n","import React, { useContext } from \"react\";\nimport classes from \"./styles.module.scss\";\nimport { playersContext } from \"./contexts/PlayersContext\";\n\ninterface Props {\n  onClick(): void;\n  playerId: number | undefined;\n}\n\nconst Square = (props: Props) => {\n  const { getPlayerSign } = useContext(playersContext);\n  const sign =\n    props.playerId !== undefined ? getPlayerSign(props.playerId) : \"\";\n  return (\n    <button className={classes.square} onClick={props.onClick}>\n      {sign}\n    </button>\n  );\n};\n\nexport default Square;\n","import React from \"react\";\nimport PlayerScore from \"./classes/PlayerScore\";\n\ninterface Props {\n  scores: PlayerScore[];\n}\n\n//FIXME: Score is being called with every click!\nconst Score = (props: Props) => {\n  return (\n    <div>\n      {props.scores\n        .sort((a, b) => (a.name < b.name ? -1 : 1))\n        .map((playerScore, index) => (\n          <div key={index + 1}>\n            <span>\n              {playerScore.name}: {playerScore.score}\n            </span>\n          </div>\n        ))}\n    </div>\n  );\n};\n\nexport default Score;\n","export const getPositionFromStringToNumbers = (\n  pos: string\n): [number, number] => {\n  const splits = pos.split(\",\");\n  return [+splits[0], +splits[1]];\n};\n\nexport const getPositionFromNumbersToString = (\n  r: number,\n  c: number\n): string => {\n  return r + \",\" + c;\n};\n\nexport const getCountFromDirection = (\n  moves: Map<string, number>,\n  player: number,\n  row: number,\n  col: number,\n  verticalMovement: -1 | 0 | 1,\n  horizontalMovement: -1 | 0 | 1,\n  boardSize: number\n): number => {\n  let count = 0;\n  do {\n    row += verticalMovement;\n    col += horizontalMovement;\n    count++;\n  } while (\n    row >= 0 &&\n    col >= 0 &&\n    row < boardSize &&\n    col < boardSize &&\n    moves.get(getPositionFromNumbersToString(row, col)) === player\n  );\n\n  return count;\n};\n\nexport const getWinner = (\n  moves: Map<string, number>,\n  lastMove: string,\n  boardSize: number,\n  winningSize: number\n): number | null => {\n  if (lastMove === null) return null;\n\n  const [row, col] = getPositionFromStringToNumbers(lastMove);\n  const player = moves.get(lastMove);\n\n  if (player === undefined) {\n    throw Error(\"last move must exist in moves\");\n  }\n\n  enum Directions {\n    Left = -1,\n    Right = 1,\n    Up = -1,\n    Down = 1,\n    Still = 0,\n  }\n  const directions = [\n    //[r, c], [r, c]\n    [\n      [Directions.Still, Directions.Left],\n      [Directions.Still, Directions.Right],\n    ], //left, right\n    [\n      [Directions.Up, Directions.Still],\n      [Directions.Down, Directions.Still],\n    ], //up, down\n    [\n      [Directions.Up, Directions.Right],\n      [Directions.Down, Directions.Left],\n    ], //up right, down left\n    [\n      [Directions.Up, Directions.Left],\n      [Directions.Down, Directions.Right],\n    ], //up left, down right\n  ];\n\n  return directions.some(([d1, d2]) => {\n    const c1 =\n      getCountFromDirection(moves, player, row, col, d1[0], d1[1], boardSize) -\n      1;\n    const c2 =\n      getCountFromDirection(moves, player, row, col, d2[0], d2[1], boardSize) -\n      1;\n    return c1 + c2 + 1 === winningSize;\n  })\n    ? player\n    : null;\n};\n","import React, {\n  useState,\n  useCallback,\n  useMemo,\n  useContext,\n  useEffect,\n} from \"react\";\nimport classes from \"./styles.module.scss\";\nimport Square from \"./Square\";\nimport Score from \"./Score\";\nimport { getWinner, getPositionFromNumbersToString } from \"./lib/Utils\";\nimport { playersContext } from \"./contexts/PlayersContext\";\n\ninterface Props {\n  names: string[];\n  restart(): void;\n}\n\nconst Board = (props: Props) => {\n  const {\n    init,\n    addScoreToWinner,\n    getPlayerName,\n    setNextPlayerId,\n    getPlayersScores,\n    currentPlayerId,\n  } = useContext(playersContext);\n  const boardSize = 15;\n  const winningSize = 5;\n  useEffect(() => {\n    init(props.names);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []);\n\n  const [lastMove, setLastMove] = useState<string | null>(null);\n  //Map between the cell and the player played on that cell if any.\n  const [moves, setMoves] = useState<Map<string, number>>(\n    new Map<string, number>()\n  );\n\n  const winnerPlayer = useMemo<number | null>(() => {\n    if (lastMove === null) return null;\n    const winner = getWinner(moves, lastMove, boardSize, winningSize);\n    return winner;\n  }, [lastMove, moves]);\n\n  useEffect(() => {\n    if (winnerPlayer !== null) {\n      addScoreToWinner(winnerPlayer);\n    }\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [winnerPlayer]);\n\n  const isBoardFilled = useMemo<boolean>(() => {\n    return moves.size === boardSize * boardSize;\n    //FIXME: lastMove is unneeded here.\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [moves, lastMove]);\n\n  const isGameOver = useMemo<boolean>(() => {\n    return winnerPlayer !== null || isBoardFilled;\n  }, [isBoardFilled, winnerPlayer]);\n\n  const onSquareClick = useCallback(\n    (rowNumber: number, colNumber: number): void => {\n      //Not to click on a filled cell.\n      const pos: string = getPositionFromNumbersToString(rowNumber, colNumber);\n      if (moves.has(pos) === true) return;\n\n      setLastMove(pos);\n      const newMoves = moves.set(pos, currentPlayerId);\n      setMoves(newMoves);\n      setNextPlayerId();\n    },\n    [currentPlayerId, moves, setNextPlayerId]\n  );\n\n  const restartGame = () => {\n    props.restart();\n    setLastMove(null);\n    setMoves(new Map<string, number>());\n  };\n\n  const renderRow = useCallback(\n    (rowNumber: number) => {\n      return (\n        <div key={rowNumber} className={classes.boardRow}>\n          {Array<number>(boardSize)\n            .fill(0)\n            .map((_: any, colNumber: number) => (\n              <Square\n                key={colNumber}\n                playerId={moves.get(\n                  getPositionFromNumbersToString(rowNumber, colNumber)\n                )}\n                onClick={() => onSquareClick(rowNumber, colNumber)}\n              />\n            ))}\n        </div>\n      );\n    },\n    [moves, onSquareClick]\n  );\n\n  const currentPlayerName =\n    currentPlayerId === -1 ? \"\" : getPlayerName(currentPlayerId);\n\n  return (\n    <div className={classes.game}>\n      <div>\n        <span>\n          {!isGameOver\n            ? `Current Player: ${currentPlayerName}`\n            : isBoardFilled\n            ? \"Draw!\"\n            : winnerPlayer\n            ? getPlayerName(winnerPlayer) + \" won!\"\n            : \"\"}\n        </span>\n      </div>\n      <div className={classes.board}>\n        {isGameOver ? (\n          <button onClick={restartGame}>Restart</button>\n        ) : (\n          Array<number>(boardSize)\n            .fill(0)\n            .map((_: any, i: number) => renderRow(i))\n        )}\n      </div>\n      <div>\n        <Score scores={getPlayersScores()}></Score>\n      </div>\n    </div>\n  );\n};\n\nexport default Board;\n","export default class Player {\n  id: number;\n  name: string;\n  score: number;\n  inPlay: boolean;\n  static count: number = 10;\n  constructor(name: string) {\n    this.id = Player.count++;\n    this.name = name;\n    this.score = 0;\n    this.inPlay = false;\n  }\n}\n","export default class PlayerScore {\n  name: string;\n  score: number;\n  constructor(name: string, score: number) {\n    this.name = name;\n    this.score = score;\n  }\n}\n","import { PlayersContext } from \"../contexts/PlayersContext\";\n\nimport { useState, useCallback } from \"react\";\nimport Player from \"../classes/Player\";\nimport PlayerScore from \"../classes/PlayerScore\";\n\nexport const usePlayers = (): PlayersContext => {\n  const [playersRepo, setPlayersRepo] = useState<Array<Player>>(\n    new Array<Player>()\n  );\n\n  const playingPlayersCount = (): number => {\n    return playersRepo.filter((player) => player.inPlay).length;\n  };\n\n  const [currentPlayerId, setCurrentPlayerId] = useState(-1);\n\n  const addScoreToWinner = useCallback(\n    (id: number): void => {\n      setPlayersRepo(\n        playersRepo.map((p) => (p.id === id ? { ...p, score: p.score + 1 } : p))\n      );\n    },\n    [playersRepo]\n  );\n\n  const setNextPlayerId = useCallback(() => {\n    const playingPlayersIds = playersRepo\n      .filter((p) => p.inPlay)\n      .map((p) => p.id);\n    const index = playingPlayersIds.indexOf(currentPlayerId);\n    const newId = playingPlayersIds[(index + 1) % playingPlayersIds.length];\n    setCurrentPlayerId(newId);\n  }, [currentPlayerId, playersRepo, setCurrentPlayerId]);\n\n  const getPlayerName = (id: number): string => {\n    const player = playersRepo.find((p) => p.id === id);\n    if (!player) throw Error(`Player with id ${id} does not exist`);\n    return player.name;\n  };\n\n  const setPlayerName = (id: number, newName: string): void => {\n    setPlayersRepo(\n      playersRepo.map((p) => (p.id === id ? { ...p, name: newName } : p))\n    );\n  };\n\n  const init = (names: string[]) => {\n    const cloneOfPlayersRepo = playersRepo.map((p) => ({\n      ...p,\n      inPlay: false,\n    }));\n    let firstId: number = -1;\n    for (let index = 0; index < names.length; index++) {\n      const name = names[index];\n      const indexInRepo = cloneOfPlayersRepo.findIndex((p) => p.name === name);\n\n      if (indexInRepo === -1) {\n        const player = new Player(name);\n        player.inPlay = true;\n        cloneOfPlayersRepo.push(player);\n        if (firstId === -1) firstId = player.id;\n      } else {\n        const player = new Player(cloneOfPlayersRepo[indexInRepo].name);\n        player.id = cloneOfPlayersRepo[indexInRepo].id;\n        player.score = cloneOfPlayersRepo[indexInRepo].score;\n        player.inPlay = true;\n\n        cloneOfPlayersRepo.splice(indexInRepo, 1);\n        cloneOfPlayersRepo.push(player);\n\n        if (firstId === -1) firstId = cloneOfPlayersRepo[indexInRepo].id;\n      }\n    }\n    setCurrentPlayerId(firstId);\n    setPlayersRepo(cloneOfPlayersRepo);\n  };\n\n  const getPlayerSign = (id: number): string => {\n    const allSigns = \"XO+#^\";\n    const playingPlayers = playersRepo.filter((p) => p.inPlay);\n    return allSigns[playingPlayers.findIndex((p) => p.id === id)];\n  };\n\n  const getPlayersScores = (): PlayerScore[] => {\n    return playersRepo.map(\n      (player) => new PlayerScore(player.name, player.score)\n    );\n  };\n\n  return {\n    init,\n    playingPlayersCount,\n    setNextPlayerId,\n    addScoreToWinner,\n    getPlayerName,\n    setPlayerName,\n    getPlayerSign,\n    currentPlayerId,\n    getPlayersScores,\n  };\n};\n","import React, { useState } from \"react\";\nimport Board from \"./Board\";\nimport { usePlayers } from \"./hooks/players.hook\";\nimport { playersContext } from \"./contexts/PlayersContext\";\n\nfunction App() {\n  const [numOfPlayers, setNumOfPlayers] = useState<number>(2);\n  const [inPlayMode, setInPlayMode] = useState<boolean>(false);\n  const [names, setNames] = useState<Array<string>>(new Array<string>());\n\n  const restart = () => {\n    setInPlayMode(false);\n  };\n\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const value = parseInt(event.target.value);\n    if (!value) return;\n    setNumOfPlayers(value);\n  };\n\n  const getPlayerName = (index: number): string => {\n    const person = prompt(\n      `Please enter player${index + 1} name:`,\n      `Player ${index + 1}`\n    );\n    if (person === null || person === \"\") {\n      return getPlayerName(index);\n    } else {\n      return person;\n    }\n  };\n\n  const onSubmit = (event: React.FormEvent<HTMLFormElement>) => {\n    const inputNames = new Array<string>(numOfPlayers);\n    for (let index = 0; index < inputNames.length; index++) {\n      inputNames[index] = getPlayerName(index);\n    }\n    setInPlayMode(true);\n    setNames(inputNames);\n    event.preventDefault();\n  };\n\n  const body = inPlayMode ? (\n    <Board names={names} restart={restart} />\n  ) : (\n    <form onSubmit={onSubmit}>\n      <label>Enter number of players: </label>\n      <input\n        type=\"number\"\n        value={numOfPlayers}\n        min=\"1\"\n        max=\"5\"\n        onChange={onChange}\n      ></input>\n      <input type=\"submit\" value=\"Submit\" />\n    </form>\n  );\n\n  return (\n    <playersContext.Provider value={usePlayers()}>\n      {body}\n    </playersContext.Provider>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"game\":\"styles_game__1FVe4\",\"board\":\"styles_board__o22sn\",\"boardRow\":\"styles_boardRow__3UDTx\",\"square\":\"styles_square__1JKAo\"};"],"sourceRoot":""}